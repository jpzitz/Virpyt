# use openpyxl to open an excel sheet
# use python classes to sort attributes of the excel sheet


import openpyxl
        

# workbook class with pointer to the workbook
class Workbook():

    # constructor/attribute __init__() that takes a workbookname
    # and then uses openpyxl to open that workbook and store the
    # workbook pointer in a local member.  
    def __init__(self, workbook):
        self.workbook = workbook

    
    @property
    def workbook(self):
        """The file property."""
        print("Get file")
        return self._workbook

    @workbook.setter
    def workbook(self, filename):
        print("Set filename")
        self._workbook = openpyxl.load_workbook(filename)
    

    # .worksheets returns a list of sheetnames
    @property
    def worksheets(self):
        return self._workbook.sheetnames


    # attribute/method that returns a list of VirPyTSheet
    #@property    
    def sheets(self):
        # constructor should be generated by
        # wrapping individual sheet returned by wb.worksheets
        return [Sheet(temp_sheet) for temp_sheet in self._workbook]



# sheet class with pointers to sheets in the workbook        
class Sheet():
    def __init__(self, sheet):
        self._sheet = Workbook.worksheets
        

# table class probably to scan empty cells that bound the table
# or look for cell border formatting in the file
class Table():
    def __init__(self, table):
        self.table = table

    

        
#class Row():
#class Cell():

              

if __name__ == '__main__':
    #workbookname = input(print("Input workbookname: "))
    
    #wb = openpyxl.load_workbook('sample.xlsx')

    wb = Workbook('sample.xlsx')
    print(wb.workbook)        #address of openpyxl workbook object
    #print(wb._workbook)
    
    print(wb.sheets())    #returns list of sheet obj and addresses
    print(wb.worksheets)  #list of names of worksheets
    

    for sheet in wb.worksheets:     #prints each sheet title
        print("Found sheet named %s" %sheet)



